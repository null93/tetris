package com.tetris;

import java.awt.Color;

/**
 * This enum class simply defines all the different types of Tetris shapes and it also contains
 * static functions that will return the associated color and the associated border color which is
 * dynamically generated by generating a certain tint of the original color.
 * @version     1.0.0
 * @university  University of Illinois at Chicago
 * @course      CS342 - Software Design
 * @category    Project #05 - Tetris Game
 * @package     Graphical User Interface
 * @author      Rafael Grigorian
 * @author      Byambasuren Gansukh
 * @author      Paul Nguyen
 * @license     GNU Public License <http://www.gnu.org/licenses/gpl-3.0.txt>
 */
public enum Shape {

	// Define all the types of Tetris shapes
	// E for empty
	I, T, O, L, J, S, Z, Default, ISHADOW, TSHADOW, OSHADOW, LSHADOW, JSHADOW, SSHADOW, ZSHADOW;

	/**
	 * Define a static function that will return the color associated with that shape type.  It will
	 * return null if the shape is unknown.
	 * @param       Shape       type                The type of shape as defined in this enum class
	 * @return      Color                           The color associated with passed shape
	 * @static
	 */
	public static Color color ( Shape type ) {
		// Switch between all the types of shapes and return a color
		switch ( type ) {
			case I:
				return new Color ( 0xB1812C );
			case T:
				return new Color ( 0x598E47 );
			case O:
				return new Color ( 0xC6C631 );
			case L:
				return new Color ( 0xC13534 );
			case J:
				return new Color ( 0x99509F );
			case S:
				return new Color ( 0x436FB6 );
			case Z:
				return new Color ( 0x427C7C );
			case ISHADOW:
				return new Color ( 0x291E0A );
			case TSHADOW:
				return new Color ( 0x152211 );
			case OSHADOW:
				return new Color ( 0x29290A );
			case LSHADOW:
				return new Color ( 0x280B0B );
			case JSHADOW:
				return new Color ( 0x211122 );
			case SSHADOW:
				return new Color ( 0x0E1725 );
			case ZSHADOW:
				return new Color ( 0x122121 );
			default:
				return new Color ( 0x1D1F1F );
		}
	}

	/**
	 * Define a static function that will return the border color associated with that shape type.
	 * This function simply tints the original color by a set factor
	 * @param       Shape       type                The type of shape as defined in this enum class
	 * @return      Color                           The border color associated with passed shape
	 * @static
	 */
	public static Color border ( Shape type ) {
		// Get the shape color and set the scale factor
		Color current = Shape.color ( type );
		final double scale = 0.95;
		// Create a new RGB value
		int red = Math.min ( 255, ( int ) ( current.getRed () * scale ) );
		int green = Math.min ( 255, ( int ) ( current.getGreen () * scale ) );
		int blue = Math.min ( 255, ( int ) ( current.getBlue () * scale ) );
		// Return the new color
		return new Color ( red, green, blue );
	}

}
